import jwt from 'jsonwebtoken';

// Middleware to protect routes
const protectRoute = (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1]; // Bearer token
  if (!token) return res.status(401).json({ message: 'Unauthorized' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token' });
  }
};

// Apply protectRoute middleware to Add Product and Delete Product routes
app.post('/api/products', protectRoute, async (req, res) => {
  // Product creation logic...
});

app.delete('/api/products/:id', protectRoute, async (req, res) => {
  // Product deletion logic...
});
